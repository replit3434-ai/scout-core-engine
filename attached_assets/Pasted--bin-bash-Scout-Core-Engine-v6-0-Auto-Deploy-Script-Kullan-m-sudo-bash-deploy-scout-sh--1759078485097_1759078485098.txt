#!/bin/bash
# Scout Core Engine v6.0 - Auto Deploy Script
# Kullanım: sudo bash deploy_scout.sh
# Gereksinimler: Ubuntu 22.04 LTS, root yetkisi

set -e

# Renkli output için
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Değişkenler
APP_DIR="/opt/scout_core"
SERVICE_FILE="/etc/systemd/system/scout_core.service"
MODEL_BACKUP_CRON="/etc/cron.d/scout_model_backup"
LOG_DIR="/var/log/scout_core"
SCOUT_USER="scout"

echo -e "${BLUE}🚀 Scout Core Engine v6.0 - Auto Deploy Script${NC}"
echo -e "${BLUE}=================================================${NC}"

# Root kontrolü
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}❌ Bu script root yetkisi ile çalıştırılmalı!${NC}"
   echo "Kullanım: sudo bash deploy_scout.sh"
   exit 1
fi

# API Key kontrolü
if [[ -z "$SPORTMONKS_API_KEY" || -z "$FOOTYSTATS_API_KEY" ]]; then
    echo -e "${YELLOW}⚠️  API anahtarları ortam değişkeni olarak tanımlanmamış!${NC}"
    echo "Lütfen şu komutları çalıştırın:"
    echo "export SPORTMONKS_API_KEY='your_key_here'"
    echo "export FOOTYSTATS_API_KEY='your_key_here'"
    echo "Sonra scripti tekrar çalıştırın."
    exit 1
fi

echo -e "${GREEN}✅ API anahtarları bulundu${NC}"

# 1️⃣ Sistem güncellemesi ve paket kurulumu
echo -e "${BLUE}📦 Sistem paketleri güncelleniyor...${NC}"
apt update && apt upgrade -y
apt install -y python3 python3-pip python3-venv git htop ufw curl

# 2️⃣ Scout kullanıcısı oluştur
echo -e "${BLUE}👤 Scout kullanıcısı oluşturuluyor...${NC}"
if ! id "$SCOUT_USER" &>/dev/null; then
    useradd -r -s /bin/false -d $APP_DIR $SCOUT_USER
    echo -e "${GREEN}✅ Scout kullanıcısı oluşturuldu${NC}"
else
    echo -e "${YELLOW}⚠️  Scout kullanıcısı zaten mevcut${NC}"
fi

# 3️⃣ Uygulama dizini oluştur
echo -e "${BLUE}📁 Uygulama dizini hazırlanıyor...${NC}"
mkdir -p $APP_DIR
mkdir -p $LOG_DIR
mkdir -p $APP_DIR/models
mkdir -p $APP_DIR/logs
mkdir -p $APP_DIR/data

# Eğer mevcut kod yoksa, örnek yapı oluştur
if [[ ! -f "$APP_DIR/core_engine.py" ]]; then
    echo -e "${YELLOW}⚠️  core_engine.py bulunamadı. Lütfen Scout Core kodlarını $APP_DIR dizinine kopyalayın.${NC}"
    echo "Örnek: git clone https://github.com/your-repo/scout_core.git $APP_DIR"
    echo "Veya dosyaları manuel olarak kopyalayın."
    
    # Temel requirements.txt oluştur
    cat <<EOF > $APP_DIR/requirements.txt
aiohttp>=3.8.0
asyncio
pandas>=1.5.0
numpy>=1.21.0
scikit-learn>=1.1.0
torch>=1.12.0
requests>=2.28.0
python-dotenv>=0.19.0
schedule>=1.1.0
EOF
    echo -e "${GREEN}✅ Temel requirements.txt oluşturuldu${NC}"
fi

# 4️⃣ Python sanal ortamı ve bağımlılıklar
echo -e "${BLUE}🐍 Python sanal ortamı kuruluyor...${NC}"
cd $APP_DIR
python3 -m venv venv
source venv/bin/activate

if [[ -f "requirements.txt" ]]; then
    pip install --upgrade pip
    pip install -r requirements.txt
    echo -e "${GREEN}✅ Python bağımlılıkları kuruldu${NC}"
else
    echo -e "${RED}❌ requirements.txt bulunamadı!${NC}"
    exit 1
fi

# 5️⃣ Model backup scripti oluştur
echo -e "${BLUE}💾 Model backup scripti oluşturuluyor...${NC}"
mkdir -p $APP_DIR/utils
cat <<EOF > $APP_DIR/utils/model_backup.py
#!/usr/bin/env python3
"""
Scout Core Engine - Model Backup Script
Günlük model yedekleme ve performans raporlama
"""
import os
import shutil
import datetime
import logging
from pathlib import Path

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def backup_models():
    """Model dosyalarını yedekle"""
    try:
        models_dir = Path("/opt/scout_core/models")
        backup_dir = Path("/opt/scout_core/backups")
        backup_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        
        for model_file in models_dir.glob("*.pkl"):
            backup_name = f"{model_file.stem}_{timestamp}.pkl"
            backup_path = backup_dir / backup_name
            shutil.copy2(model_file, backup_path)
            logger.info(f"Model yedeklendi: {backup_name}")
        
        # Eski yedekleri temizle (30 günden eski)
        cutoff_date = datetime.datetime.now() - datetime.timedelta(days=30)
        for backup_file in backup_dir.glob("*.pkl"):
            if backup_file.stat().st_mtime < cutoff_date.timestamp():
                backup_file.unlink()
                logger.info(f"Eski yedek silindi: {backup_file.name}")
                
        logger.info("Model backup işlemi tamamlandı")
        
    except Exception as e:
        logger.error(f"Model backup hatası: {e}")

if __name__ == "__main__":
    backup_models()
EOF

chmod +x $APP_DIR/utils/model_backup.py

# 6️⃣ systemd servis dosyası oluştur
echo -e "${BLUE}⚙️  Systemd servisi oluşturuluyor...${NC}"
cat <<EOF > $SERVICE_FILE
[Unit]
Description=Scout Core Engine v6.0
Documentation=https://github.com/your-repo/scout_core
After=network.target network-online.target
Wants=network-online.target

[Service]
Type=simple
User=$SCOUT_USER
Group=$SCOUT_USER
WorkingDirectory=$APP_DIR
ExecStart=$APP_DIR/venv/bin/python $APP_DIR/core_engine.py
ExecReload=/bin/kill -HUP \$MAINPID
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal
SyslogIdentifier=scout_core

# Ortam değişkenleri
Environment=SPORTMONKS_API_KEY=$SPORTMONKS_API_KEY
Environment=FOOTYSTATS_API_KEY=$FOOTYSTATS_API_KEY
Environment=PYTHONPATH=$APP_DIR
Environment=LOG_LEVEL=INFO

# Güvenlik
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=$APP_DIR $LOG_DIR

[Install]
WantedBy=multi-user.target
EOF

# 7️⃣ Dosya izinlerini ayarla
echo -e "${BLUE}🔐 Dosya izinleri ayarlanıyor...${NC}"
chown -R $SCOUT_USER:$SCOUT_USER $APP_DIR
chown -R $SCOUT_USER:$SCOUT_USER $LOG_DIR
chmod +x $APP_DIR/core_engine.py 2>/dev/null || echo "core_engine.py bulunamadı, manuel olarak executable yapın"

# 8️⃣ Servisi etkinleştir
echo -e "${BLUE}🚀 Servis etkinleştiriliyor...${NC}"
systemctl daemon-reload
systemctl enable scout_core

# 9️⃣ Cron job oluştur
echo -e "${BLUE}⏰ Cron job oluşturuluyor...${NC}"
cat <<EOF > $MODEL_BACKUP_CRON
# Scout Core Engine - Model Backup (Her gün 03:00)
0 3 * * * $SCOUT_USER $APP_DIR/venv/bin/python $APP_DIR/utils/model_backup.py >> $LOG_DIR/model_backup.log 2>&1

# Scout Core Engine - Haftalık performans raporu (Pazartesi 04:00)
0 4 * * 1 $SCOUT_USER $APP_DIR/venv/bin/python $APP_DIR/utils/weekly_report.py >> $LOG_DIR/weekly_report.log 2>&1
EOF

# 🔟 Firewall ayarları
echo -e "${BLUE}🔥 Firewall ayarlanıyor...${NC}"
ufw --force enable
ufw allow ssh
ufw allow 8000/tcp comment "Scout Core API"
echo -e "${GREEN}✅ Firewall ayarlandı${NC}"

# 1️⃣1️⃣ Servisi başlat
echo -e "${BLUE}▶️  Servis başlatılıyor...${NC}"
if systemctl start scout_core; then
    echo -e "${GREEN}✅ Scout Core Engine başarıyla başlatıldı!${NC}"
else
    echo -e "${RED}❌ Servis başlatılamadı. Logları kontrol edin.${NC}"
    echo "Debug için: journalctl -fu scout_core"
fi

# 1️⃣2️⃣ Kurulum özeti
echo -e "${GREEN}"
echo "🎉 KURULUM TAMAMLANDI!"
echo "===================="
echo -e "${NC}"
echo -e "${BLUE}📍 Uygulama Dizini:${NC} $APP_DIR"
echo -e "${BLUE}📍 Log Dizini:${NC} $LOG_DIR"
echo -e "${BLUE}📍 Servis Dosyası:${NC} $SERVICE_FILE"
echo ""
echo -e "${YELLOW}🔧 Yönetim Komutları:${NC}"
echo "  Servis durumu:     systemctl status scout_core"
echo "  Servisi durdur:    systemctl stop scout_core"
echo "  Servisi başlat:    systemctl start scout_core"
echo "  Servisi yeniden başlat: systemctl restart scout_core"
echo "  Canlı loglar:      journalctl -fu scout_core"
echo ""
echo -e "${YELLOW}📊 Log Dosyaları:${NC}"
echo "  Ana loglar:        journalctl -u scout_core"
echo "  Model backup:      $LOG_DIR/model_backup.log"
echo "  Haftalık rapor:    $LOG_DIR/weekly_report.log"
echo ""
echo -e "${YELLOW}🔄 Güncelleme için:${NC}"
echo "  cd $APP_DIR && git pull origin main"
echo "  systemctl restart scout_core"
echo ""
echo -e "${GREEN}🚀 Scout Core Engine v6.0 production ortamında çalışmaya hazır!${NC}"

# Servis durumunu göster
sleep 2
systemctl status scout_core --no-pager